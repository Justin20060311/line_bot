from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, TemplateSendMessage, QuickReply, QuickReplyButton, MessageAction, PostbackEvent, FlexSendMessage
from linebot.v3.messaging import Configuration, ApiClient, MessagingApi # Êñ∞Â¢û v3 Áõ∏ÈóúÂºïÂÖ•
import tempfile
import os
import logging
import google.generativeai as genai

static_tmp_path = tempfile.gettempdir()
os.makedirs(static_tmp_path, exist_ok=True)
base_url = os.getenv("SPACE_HOST")

app = Flask(__name__)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
app.logger.setLevel(logging.INFO)

channel_secret = os.environ.get("LINE_CHANNEL_SECRET")
channel_access_token = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")

# ÂàùÂßãÂåñ LineBotApi Âíå WebhookHandler
configuration = Configuration(access_token=channel_access_token)
line_bot_api = LineBotApi(channel_access_token) # <-- ÈÄôË£°Êñ∞Â¢û‰∫Ü line_bot_api ÁöÑÂØ¶‰æãÂåñ
handler = WebhookHandler(channel_secret)

# Áî®ÊñºÂÑ≤Â≠ò‰ΩøÁî®ËÄÖË≥áÊñôÁöÑÂ≠óÂÖ∏ (ÂØ¶ÈöõÊáâÁî®ÂèØËÉΩÈúÄË¶Å‰ΩøÁî®Ë≥áÊñôÂ∫´)
user_data = {} # {user_id: {'gender': '', 'age': '', ...}}

# ÂÆöÁæ© BMI, BMR, TDEE Ë®àÁÆóÂáΩÂºè
def calculate_bmi(height, weight):
    # BMI = È´îÈáç (kg) / (Ë∫´È´ò (m))^2
    return round(weight / ((height / 100) ** 2), 2)

def calculate_bmr(gender, age, height, weight):
    # Mifflin-St Jeor Equation
    if gender == 'Áî∑':
        return round((10 * weight) + (6.25 * height) - (5 * age) + 5, 2)
    elif gender == 'Â•≥':
        return round((10 * weight) + (6.25 * height) - (5 * age) - 161, 2)
    return 0

def calculate_tdee(bmr, activity_level):
    # ÈÅãÂãïÈáè‰øÇÊï∏ (ÂÉÖÁÇ∫ÁØÑ‰æãÔºåÂèØËá™Ë°åË™øÊï¥)
    activity_factors = {
        '‰πÖÂùê': 1.2,
        'ËºïÂ∫¶Ê¥ªÂãï': 1.375,
        '‰∏≠Â∫¶Ê¥ªÂãï': 1.55,
        'È´òÂ∫¶Ê¥ªÂãï': 1.725,
        'ÈùûÂ∏∏È´òÂ∫¶Ê¥ªÂãï': 1.9
    }
    return round(bmr * activity_factors.get(activity_level, 1.2), 2)

# ==================== ÈáçË¶ÅÔºöË∑ØÁî±ÂÆöÁæ©ÊáâË©≤Âú®È†ÇÂ±§Ôºå‰∏çÁ∏ÆÊéí ====================
@app.route("/")
def home():
    return {"message": "Line Webhook Server"}

@app.route("/", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature")
    body = request.get_data(as_text=True)
    app.logger.info(f"Request body: {body}")

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        app.logger.warning("Invalid signature. Please check channel credentials.")
        abort(400)

    return "OK"
# =========================================================================

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text

    # ÂàùÂßãÂåñ‰ΩøÁî®ËÄÖË≥áÊñô
    if user_id not in user_data:
        user_data[user_id] = {}
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text='ÂìàÂõâÔºÅÊàëÊòØ‰Ω†ÁöÑÂÅ•Â∫∑È°ßÂïèÔºåËÆìÊàëÂÄëÈñãÂßãÂêßÔºÅË´ãÂïèÊÇ®ÁöÑÊÄßÂà•ÊòØÔºü (Áî∑/Â•≥)')
        )
        return

    # ËôïÁêÜ‰ΩøÁî®ËÄÖËº∏ÂÖ•ÊµÅÁ®ã
    if 'gender' not in user_data[user_id]:
        if text in ['Áî∑', 'Â•≥']:
            user_data[user_id]['gender'] = text
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='Â•ΩÁöÑÔºåË´ãÂïèÊÇ®ÁöÑÂπ¥ÈΩ°ÊòØÔºü')
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='Ë´ãËº∏ÂÖ•„ÄåÁî∑„ÄçÊàñ„ÄåÂ•≥„Äç„ÄÇ')
            )
    elif 'age' not in user_data[user_id]:
        try:
            age = int(text)
            if 0 < age < 120: # Á∞°ÂñÆÁöÑÈ©óË≠â
                user_data[user_id]['age'] = age
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text='Ë´ãÂïèÊÇ®ÁöÑË∫´È´òÊòØÂπæÂÖ¨ÂàÜÔºü (‰æãÂ¶ÇÔºö170)')
                )
            else:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text='Ë´ãËº∏ÂÖ•‰∏ÄÂÄãÂêàÁêÜÁöÑÂπ¥ÈΩ°„ÄÇ')
                )
        except ValueError:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='Ë´ãËº∏ÂÖ•Êï∏Â≠ó‰ΩúÁÇ∫Âπ¥ÈΩ°„ÄÇ')
            )
    elif 'height' not in user_data[user_id]:
        try:
            height = float(text)
            if 50 < height < 250:
                user_data[user_id]['height'] = height
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text='Ë´ãÂïèÊÇ®ÁöÑÈ´îÈáçÊòØÂπæÂÖ¨Êñ§Ôºü (‰æãÂ¶ÇÔºö65.5)')
                )
            else:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text='Ë´ãËº∏ÂÖ•‰∏ÄÂÄãÂêàÁêÜÁöÑË∫´È´ò (ÂÖ¨ÂàÜ)„ÄÇ')
                )
        except ValueError:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='Ë´ãËº∏ÂÖ•Êï∏Â≠ó‰ΩúÁÇ∫Ë∫´È´ò„ÄÇ')
            )
    elif 'weight' not in user_data[user_id]:
        try:
            weight = float(text)
            if 20 < weight < 300:
                user_data[user_id]['weight'] = weight
                                                
                # ÊèêÁ§∫ÈÅãÂãïÈáè
                quick_reply_buttons = [
                    QuickReplyButton(action=MessageAction(label="‰πÖÂùê", text="‰πÖÂùê")),
                    QuickReplyButton(action=MessageAction(label="ËºïÂ∫¶Ê¥ªÂãï (1-3Â§©/ÈÄ±ÈÅãÂãï)", text="ËºïÂ∫¶Ê¥ªÂãï")),
                    QuickReplyButton(action=MessageAction(label="‰∏≠Â∫¶Ê¥ªÂãï (3-5Â§©/ÈÄ±ÈÅãÂãï)", text="‰∏≠Â∫¶Ê¥ªÂãï")),
                    QuickReplyButton(action=MessageAction(label="È´òÂ∫¶Ê¥ªÂãï (6-7Â§©/ÈÄ±ÈÅãÂãï)", text="È´òÂ∫¶Ê¥ªÂãï")),
                    QuickReplyButton(action=MessageAction(label="ÈùûÂ∏∏È´òÂ∫¶Ê¥ªÂãï (ÈÅãÂãïÂì°/ÂãûÂäõÂ∑•‰ΩúËÄÖ)", text="ÈùûÂ∏∏È´òÂ∫¶Ê¥ªÂãï")),
                ]
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text='Â§™Ê£í‰∫ÜÔºÅÊúÄÂæåÔºåË´ãÂïèÊÇ®ÁöÑÈÅãÂãïÈáèÊòØÔºü',
                                    quick_reply=QuickReply(items=quick_reply_buttons))
                )
            else:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text='Ë´ãËº∏ÂÖ•‰∏ÄÂÄãÂêàÁêÜÁöÑÈ´îÈáç (ÂÖ¨Êñ§)„ÄÇ')
                )
        except ValueError:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='Ë´ãËº∏ÂÖ•Êï∏Â≠ó‰ΩúÁÇ∫È´îÈáç„ÄÇ')
            )
    elif 'activity_level' not in user_data[user_id]:
        valid_activities = ['‰πÖÂùê', 'ËºïÂ∫¶Ê¥ªÂãï', '‰∏≠Â∫¶Ê¥ªÂãï', 'È´òÂ∫¶Ê¥ªÂãï', 'ÈùûÂ∏∏È´òÂ∫¶Ê¥ªÂãï']
        if text in valid_activities:
            user_data[user_id]['activity_level'] = text

            # Ë®àÁÆó BMI, BMR, TDEE
            gender = user_data[user_id]['gender']
            age = user_data[user_id]['age']
            height = user_data[user_id]['height']
            weight = user_data[user_id]['weight']
            activity_level = user_data[user_id]['activity_level']

            bmi = calculate_bmi(height, weight)
            bmr = calculate_bmr(gender, age, height, weight)
            tdee = calculate_tdee(bmr, activity_level)

            user_data[user_id]['bmi'] = bmi
            user_data[user_id]['bmr'] = bmr
            user_data[user_id]['tdee'] = tdee

            # ÂõûË¶ÜË®àÁÆóÁµêÊûú‰∏¶Ë©¢ÂïèÁõÆÊ®ô
            result_message = (
                f"ÊÇ®ÁöÑÂü∫Êú¨Ë≥áÊñôÂ∑≤Êî∂ÈõÜÂÆåÁï¢ÔºÅ\n"
                f"üåü Ë®àÁÆóÁµêÊûúÔºö\n"
                f"  - BMI: {bmi}\n"
                f"  - BMR: {bmr} Â§ßÂç°\n"
                f"  - TDEE: {tdee} Â§ßÂç°\n\n"
                f"Ë´ãÂïèÊÇ®ÁöÑÁõÆÊ®ôÊòØÔºü"
            )
            
            target_buttons = [
                QuickReplyButton(action=MessageAction(label="Â¢ûËÇå", text="Â¢ûËÇå")),
                QuickReplyButton(action=MessageAction(label="Ê∏õËÑÇ", text="Ê∏õËÑÇ")),
                QuickReplyButton(action=MessageAction(label="Á∂≠ÊåÅÈ´îÈáç", text="Á∂≠ÊåÅÈ´îÈáç")),
            ]
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=result_message,
                                quick_reply=QuickReply(items=target_buttons))
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='Ë´ãÂæûÊèê‰æõÁöÑÈÅ∏È†Ö‰∏≠ÈÅ∏ÊìáÊÇ®ÁöÑÈÅãÂãïÈáè„ÄÇ')
            )
    elif 'goal' not in user_data[user_id]:
        if text in ['Â¢ûËÇå', 'Ê∏õËÑÇ', 'Á∂≠ÊåÅÈ´îÈáç']:
            user_data[user_id]['goal'] = text
            
            # Ê†πÊìöÁõÆÊ®ôÊèê‰æõÂª∫Ë≠∞
            advice_message = generate_advice(user_data[user_id])
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=advice_message)
            )
            # ÂÆåÊàêÂæåÊ∏ÖÈô§‰ΩøÁî®ËÄÖË≥áÊñôÔºå‰ª•‰æø‰∏ãÊ¨°ÈáçÊñ∞ÈñãÂßã (ÂØ¶ÈöõÊáâÁî®ÊúÉÊõ¥Ë§áÈõú)
            del user_data[user_id] 
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='Ë´ãÈÅ∏Êìá„ÄåÂ¢ûËÇå„Äç„ÄÅ„ÄåÊ∏õËÑÇ„ÄçÊàñ„ÄåÁ∂≠ÊåÅÈ´îÈáç„Äç„ÄÇ')
            )
    else:
        # Â¶ÇÊûúÂ∑≤Á∂ìÊúâÊâÄÊúâË≥áÊñôÔºå‰ΩÜ‰ΩøÁî®ËÄÖÂèàËº∏ÂÖ•‰∫ÜÂÖ∂‰ªñË®äÊÅØÔºåÂèØ‰ª•ÂõûË¶Ü‰∏Ä‰∫õÈ†êË®≠Ë®äÊÅØÊàñÈáçÂïüÊµÅÁ®ã
        if text == 'ÈñãÂßã':
            if user_id in user_data: # Ensure user_id exists before deleting
                del user_data[user_id] # ÈáçÂïüÊµÅÁ®ã
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='ÂìàÂõâÔºÅÊàëÊòØ‰Ω†ÁöÑÂÅ•Â∫∑È°ßÂïèÔºåËÆìÊàëÂÄëÈáçÊñ∞ÈñãÂßãÂêßÔºÅË´ãÂïèÊÇ®ÁöÑÊÄßÂà•ÊòØÔºü (Áî∑/Â•≥)')
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='ÊÇ®Â•ΩÔºÅË´ãÂïèÊúâ‰ªÄÈ∫ºÊàëÂèØ‰ª•ÂçîÂä©ÊÇ®ÁöÑÂóéÔºüÂ¶ÇÊûúÊÇ®ÊÉ≥ÈáçÊñ∞Ë®àÁÆóÔºåË´ãËº∏ÂÖ•„ÄåÈñãÂßã„Äç„ÄÇ')
            )
            

# ÁîüÊàêÂª∫Ë≠∞ÁöÑÂáΩÂºè
def generate_advice(data):
    bmi = data.get('bmi', 0)
    bmr = data.get('bmr', 0)
    tdee = data.get('tdee', 0)
    goal = data.get('goal', '')
    gender = data.get('gender', '')
    age = data.get('age', '')
    height = data.get('height', '')
    weight = data.get('weight', '')
    activity_level = data.get('activity_level', '')

    app.logger.info(f"ÂòóË©¶Ë™øÁî® Gemini APIÔºåÁî®Êà∂ÁõÆÊ®ô: {goal}")

    # Ë®≠ÂÆö Google Gemini API ÈáëÈë∞
    api_key = os.environ.get("GOOGLE_API_KEY")
    if not api_key:
        app.logger.error("GOOGLE_API_KEY Áí∞Â¢ÉËÆäÊï∏Êú™Ë®≠ÂÆöÔºÅ")
        return "Êä±Ê≠âÔºåÁõÆÂâçÁÑ°Ê≥ïÊèê‰æõÂª∫Ë≠∞„ÄÇË´ãÁ®çÂæåÂÜçË©¶ÊàñËÅØÁπ´ÁÆ°ÁêÜÂì°„ÄÇ"

    genai.configure(api_key=api_key)

    prompt = (
        f"Ë´ãÊ†πÊìö‰ª•‰∏ã‰ΩøÁî®ËÄÖË≥áË®äÔºåÁµ¶‰∫àÂÄã‰∫∫Âåñ‰∏îÂÖ∑È´îÁöÑÂÅ•Â∫∑Âª∫Ë≠∞ÔºåÂÖßÂÆπË¶ÅÂåÖÂê´È£≤È£ü„ÄÅÈÅãÂãïËàáÊ≥®ÊÑè‰∫ãÈ†ÖÔºåË™ûÊ∞£Ë¶™Âàá‰∏îÊ¢ùÂàóÂºèÔºå‰∏¶Áî®ÁπÅÈ´î‰∏≠ÊñáÂõûÁ≠îÔºö\n"
        f"ÊÄßÂà•Ôºö{gender}\n"
        f"Âπ¥ÈΩ°Ôºö{age}\n"
        f"Ë∫´È´òÔºö{height} ÂÖ¨ÂàÜ\n"
        f"È´îÈáçÔºö{weight} ÂÖ¨Êñ§\n"
        f"BMIÔºö{bmi}\n"
        f"BMRÔºö{bmr} Â§ßÂç°\n"
        f"TDEEÔºö{tdee} Â§ßÂç°\n"
        f"ÈÅãÂãïÈáèÔºö{activity_level}\n"
        f"ÁõÆÊ®ôÔºö{goal}\n"
    )
    app.logger.info(f"ÁôºÈÄÅÁµ¶ Gemini ÁöÑ prompt: {prompt[:200]}...") # Ë®òÈåÑÈÉ®ÂàÜ prompt

    try:
        model = genai.GenerativeModel("gemini-2.0-flash")
        response = model.generate_content(prompt)

        if response and hasattr(response, 'text'):
            app.logger.info(f"Âæû Gemini Áç≤ÂæóÂõûÊáâ: {response.text[:200]}...") # Ë®òÈåÑÈÉ®ÂàÜÂõûÊáâ
            return response.text.strip()
        else:
            app.logger.error(f"Gemini API ÂõûÊáâÊ†ºÂºèÁï∞Â∏∏ÊàñÁÇ∫Á©∫: {response}")
            return "Êä±Ê≠âÔºåÁÑ°Ê≥ïÁîüÊàêÂª∫Ë≠∞ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ"
    except Exception as e:
        app.logger.error(f"Ë™øÁî® Google Gemini API ÊôÇÁôºÁîüÈåØË™§: {e}")
        return "ÂæàÊä±Ê≠âÔºåÁîüÊàêÂª∫Ë≠∞ÊôÇÁôºÁîü‰∫ÜÂïèÈ°åÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)